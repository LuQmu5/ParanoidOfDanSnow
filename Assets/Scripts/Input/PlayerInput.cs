//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""64e8a670-0f35-472b-bee5-408418909050"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""39324af2-3165-4026-99ea-497ae7cafa45"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchAutoPilot"",
                    ""type"": ""Button"",
                    ""id"": ""da2763f6-c01f-45b9-bf78-501d64ad7f5a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GlideDown"",
                    ""type"": ""Button"",
                    ""id"": ""0afbf751-189a-4f7f-a0a4-87099837b340"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GlideUp"",
                    ""type"": ""Button"",
                    ""id"": ""d3f495a1-2236-48e7-b349-3f22453a7260"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chill"",
                    ""type"": ""Button"",
                    ""id"": ""63693548-9664-4bf5-8286-d63a14ca4594"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""90ca93b2-bb72-4a33-9093-1ecf340e4f5b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6664710-61b7-4376-bb73-3d23d9f62627"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""14697f42-c63b-435d-a935-e1c382d5f22b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5f4580d3-3196-4a1e-b642-9e0f2836f522"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1f1e512-86d8-49de-884b-501ca7f80957"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e72a21bd-836d-4727-b613-015cfa428afc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchAutoPilot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1e6a3c7-4982-435e-b04a-7ef3755d4450"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GlideDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db70145b-970f-4641-8f73-4920a9535f2c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GlideUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d428a5c-f1fa-4817-8283-b89b1356386c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_SwitchAutoPilot = m_Movement.FindAction("SwitchAutoPilot", throwIfNotFound: true);
        m_Movement_GlideDown = m_Movement.FindAction("GlideDown", throwIfNotFound: true);
        m_Movement_GlideUp = m_Movement.FindAction("GlideUp", throwIfNotFound: true);
        m_Movement_Chill = m_Movement.FindAction("Chill", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Movement.enabled, "This will cause a leak and performance issues, PlayerInput.Movement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_SwitchAutoPilot;
    private readonly InputAction m_Movement_GlideDown;
    private readonly InputAction m_Movement_GlideUp;
    private readonly InputAction m_Movement_Chill;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @SwitchAutoPilot => m_Wrapper.m_Movement_SwitchAutoPilot;
        public InputAction @GlideDown => m_Wrapper.m_Movement_GlideDown;
        public InputAction @GlideUp => m_Wrapper.m_Movement_GlideUp;
        public InputAction @Chill => m_Wrapper.m_Movement_Chill;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SwitchAutoPilot.started += instance.OnSwitchAutoPilot;
            @SwitchAutoPilot.performed += instance.OnSwitchAutoPilot;
            @SwitchAutoPilot.canceled += instance.OnSwitchAutoPilot;
            @GlideDown.started += instance.OnGlideDown;
            @GlideDown.performed += instance.OnGlideDown;
            @GlideDown.canceled += instance.OnGlideDown;
            @GlideUp.started += instance.OnGlideUp;
            @GlideUp.performed += instance.OnGlideUp;
            @GlideUp.canceled += instance.OnGlideUp;
            @Chill.started += instance.OnChill;
            @Chill.performed += instance.OnChill;
            @Chill.canceled += instance.OnChill;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SwitchAutoPilot.started -= instance.OnSwitchAutoPilot;
            @SwitchAutoPilot.performed -= instance.OnSwitchAutoPilot;
            @SwitchAutoPilot.canceled -= instance.OnSwitchAutoPilot;
            @GlideDown.started -= instance.OnGlideDown;
            @GlideDown.performed -= instance.OnGlideDown;
            @GlideDown.canceled -= instance.OnGlideDown;
            @GlideUp.started -= instance.OnGlideUp;
            @GlideUp.performed -= instance.OnGlideUp;
            @GlideUp.canceled -= instance.OnGlideUp;
            @Chill.started -= instance.OnChill;
            @Chill.performed -= instance.OnChill;
            @Chill.canceled -= instance.OnChill;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSwitchAutoPilot(InputAction.CallbackContext context);
        void OnGlideDown(InputAction.CallbackContext context);
        void OnGlideUp(InputAction.CallbackContext context);
        void OnChill(InputAction.CallbackContext context);
    }
}
